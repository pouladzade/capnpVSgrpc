// Code generated by capnpc-go. DO NOT EDIT.

package capnpbenchmark

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Account struct{ capnp.Struct }

// Account_TypeID is the unique identifier for the type Account.
const Account_TypeID = 0xaa5f74d276d241e0

func NewAccount(s *capnp.Segment) (Account, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Account{st}, err
}

func NewRootAccount(s *capnp.Segment) (Account, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Account{st}, err
}

func ReadRootAccount(msg *capnp.Message) (Account, error) {
	root, err := msg.RootPtr()
	return Account{root.Struct()}, err
}

func (s Account) String() string {
	str, _ := text.Marshal(0xaa5f74d276d241e0, s.Struct)
	return str
}

func (s Account) AccountId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Account) HasAccountId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Account) SetAccountId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Account) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Account) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Account) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Account) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Account) Balance() uint64 {
	return s.Struct.Uint64(0)
}

func (s Account) SetBalance(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Account_List is a list of Account.
type Account_List struct{ capnp.List }

// NewAccount creates a new list of Account.
func NewAccount_List(s *capnp.Segment, sz int32) (Account_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Account_List{l}, err
}

func (s Account_List) At(i int) Account { return Account{s.List.Struct(i)} }

func (s Account_List) Set(i int, v Account) error { return s.List.SetStruct(i, v.Struct) }

func (s Account_List) String() string {
	str, _ := text.MarshalList(0xaa5f74d276d241e0, s.List)
	return str
}

// Account_Promise is a wrapper for a Account promised by a client call.
type Account_Promise struct{ *capnp.Pipeline }

func (p Account_Promise) Struct() (Account, error) {
	s, err := p.Pipeline.Struct()
	return Account{s}, err
}

type CoreBanking struct{ Client capnp.Client }

// CoreBanking_TypeID is the unique identifier for the type CoreBanking.
const CoreBanking_TypeID = 0xa98297869266ae45

func (c CoreBanking) EchoAccount(ctx context.Context, params func(CoreBanking_echoAccount_Params) error, opts ...capnp.CallOption) CoreBanking_echoAccount_Results_Promise {
	if c.Client == nil {
		return CoreBanking_echoAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa98297869266ae45,
			MethodID:      0,
			InterfaceName: "capnpbenchmark/capnpbenchmark.capnp:CoreBanking",
			MethodName:    "echoAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(CoreBanking_echoAccount_Params{Struct: s}) }
	}
	return CoreBanking_echoAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type CoreBanking_Server interface {
	EchoAccount(CoreBanking_echoAccount) error
}

func CoreBanking_ServerToClient(s CoreBanking_Server) CoreBanking {
	c, _ := s.(server.Closer)
	return CoreBanking{Client: server.New(CoreBanking_Methods(nil, s), c)}
}

func CoreBanking_Methods(methods []server.Method, s CoreBanking_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa98297869266ae45,
			MethodID:      0,
			InterfaceName: "capnpbenchmark/capnpbenchmark.capnp:CoreBanking",
			MethodName:    "echoAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := CoreBanking_echoAccount{c, opts, CoreBanking_echoAccount_Params{Struct: p}, CoreBanking_echoAccount_Results{Struct: r}}
			return s.EchoAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// CoreBanking_echoAccount holds the arguments for a server call to CoreBanking.echoAccount.
type CoreBanking_echoAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  CoreBanking_echoAccount_Params
	Results CoreBanking_echoAccount_Results
}

type CoreBanking_echoAccount_Params struct{ capnp.Struct }

// CoreBanking_echoAccount_Params_TypeID is the unique identifier for the type CoreBanking_echoAccount_Params.
const CoreBanking_echoAccount_Params_TypeID = 0xf679d46bf8232843

func NewCoreBanking_echoAccount_Params(s *capnp.Segment) (CoreBanking_echoAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Params{st}, err
}

func NewRootCoreBanking_echoAccount_Params(s *capnp.Segment) (CoreBanking_echoAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Params{st}, err
}

func ReadRootCoreBanking_echoAccount_Params(msg *capnp.Message) (CoreBanking_echoAccount_Params, error) {
	root, err := msg.RootPtr()
	return CoreBanking_echoAccount_Params{root.Struct()}, err
}

func (s CoreBanking_echoAccount_Params) String() string {
	str, _ := text.Marshal(0xf679d46bf8232843, s.Struct)
	return str
}

func (s CoreBanking_echoAccount_Params) Acc1() (Account, error) {
	p, err := s.Struct.Ptr(0)
	return Account{Struct: p.Struct()}, err
}

func (s CoreBanking_echoAccount_Params) HasAcc1() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CoreBanking_echoAccount_Params) SetAcc1(v Account) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAcc1 sets the acc1 field to a newly
// allocated Account struct, preferring placement in s's segment.
func (s CoreBanking_echoAccount_Params) NewAcc1() (Account, error) {
	ss, err := NewAccount(s.Struct.Segment())
	if err != nil {
		return Account{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CoreBanking_echoAccount_Params_List is a list of CoreBanking_echoAccount_Params.
type CoreBanking_echoAccount_Params_List struct{ capnp.List }

// NewCoreBanking_echoAccount_Params creates a new list of CoreBanking_echoAccount_Params.
func NewCoreBanking_echoAccount_Params_List(s *capnp.Segment, sz int32) (CoreBanking_echoAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CoreBanking_echoAccount_Params_List{l}, err
}

func (s CoreBanking_echoAccount_Params_List) At(i int) CoreBanking_echoAccount_Params {
	return CoreBanking_echoAccount_Params{s.List.Struct(i)}
}

func (s CoreBanking_echoAccount_Params_List) Set(i int, v CoreBanking_echoAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CoreBanking_echoAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xf679d46bf8232843, s.List)
	return str
}

// CoreBanking_echoAccount_Params_Promise is a wrapper for a CoreBanking_echoAccount_Params promised by a client call.
type CoreBanking_echoAccount_Params_Promise struct{ *capnp.Pipeline }

func (p CoreBanking_echoAccount_Params_Promise) Struct() (CoreBanking_echoAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return CoreBanking_echoAccount_Params{s}, err
}

func (p CoreBanking_echoAccount_Params_Promise) Acc1() Account_Promise {
	return Account_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type CoreBanking_echoAccount_Results struct{ capnp.Struct }

// CoreBanking_echoAccount_Results_TypeID is the unique identifier for the type CoreBanking_echoAccount_Results.
const CoreBanking_echoAccount_Results_TypeID = 0xbae40ac2ebeb62eb

func NewCoreBanking_echoAccount_Results(s *capnp.Segment) (CoreBanking_echoAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Results{st}, err
}

func NewRootCoreBanking_echoAccount_Results(s *capnp.Segment) (CoreBanking_echoAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Results{st}, err
}

func ReadRootCoreBanking_echoAccount_Results(msg *capnp.Message) (CoreBanking_echoAccount_Results, error) {
	root, err := msg.RootPtr()
	return CoreBanking_echoAccount_Results{root.Struct()}, err
}

func (s CoreBanking_echoAccount_Results) String() string {
	str, _ := text.Marshal(0xbae40ac2ebeb62eb, s.Struct)
	return str
}

func (s CoreBanking_echoAccount_Results) Acc2() (Account, error) {
	p, err := s.Struct.Ptr(0)
	return Account{Struct: p.Struct()}, err
}

func (s CoreBanking_echoAccount_Results) HasAcc2() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CoreBanking_echoAccount_Results) SetAcc2(v Account) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAcc2 sets the acc2 field to a newly
// allocated Account struct, preferring placement in s's segment.
func (s CoreBanking_echoAccount_Results) NewAcc2() (Account, error) {
	ss, err := NewAccount(s.Struct.Segment())
	if err != nil {
		return Account{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CoreBanking_echoAccount_Results_List is a list of CoreBanking_echoAccount_Results.
type CoreBanking_echoAccount_Results_List struct{ capnp.List }

// NewCoreBanking_echoAccount_Results creates a new list of CoreBanking_echoAccount_Results.
func NewCoreBanking_echoAccount_Results_List(s *capnp.Segment, sz int32) (CoreBanking_echoAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CoreBanking_echoAccount_Results_List{l}, err
}

func (s CoreBanking_echoAccount_Results_List) At(i int) CoreBanking_echoAccount_Results {
	return CoreBanking_echoAccount_Results{s.List.Struct(i)}
}

func (s CoreBanking_echoAccount_Results_List) Set(i int, v CoreBanking_echoAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CoreBanking_echoAccount_Results_List) String() string {
	str, _ := text.MarshalList(0xbae40ac2ebeb62eb, s.List)
	return str
}

// CoreBanking_echoAccount_Results_Promise is a wrapper for a CoreBanking_echoAccount_Results promised by a client call.
type CoreBanking_echoAccount_Results_Promise struct{ *capnp.Pipeline }

func (p CoreBanking_echoAccount_Results_Promise) Struct() (CoreBanking_echoAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return CoreBanking_echoAccount_Results{s}, err
}

func (p CoreBanking_echoAccount_Results_Promise) Acc2() Account_Promise {
	return Account_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_aaa3acc39d94e0f8 = "x\xda\xa4\x91\xbf\x8b\x13A\x1c\xc5\xdf\xfb\xee\xaek$" +
	"\xe12l\x1a\xadDS\x88\xe0iLgs\xbf<\xf4" +
	"@!sXh!2;\xae\xde\x91\xcb\xe4\xc8m\x04" +
	"\x0b\x11\x0f\xf4\x0f\x10\xc1\xca\xca\xcaC\xb4\xb7\xd4\xc2\xfe" +
	"\xb0\xb0\xbc\xc2.\xbd\\72'I\x04!\x08v\xf3" +
	"f\xde\x9b\xcf\x9b\xf9\xd6\xbf/J+\xf9*\x80>\x9d" +
	"\x1c\xf3\xab\x1f\x1e\xbc|\xf1z\xf7\x1dT3\xf2\x87\x07" +
	"\xaf\xde|y\xffv\x0f`{\x8d\xbb\xcc\xee2\x05\xb2" +
	";\xbc\x96=\x0f+\x7f\xb0\xb4\xffh\xbf\xbc\xb7\x07\xdd" +
	"$\xa7\xf6DR\xa0\xddc\xce\xec\xd9Q\xe2\x09?\x82" +
	"~\x94\x8fF\x9fO\xfc\xf8\x04u\x89@\x12N\xda'" +
	"\xe5\x8c\x80YK\x16@\xbfr\xee\xeca\xf7\xdb\xe3\x9f" +
	"\x7f\x1a\xb4\x9c\x0a\x86MY\xc0\x05o\xcd\xb6\xdb\xce\x0b" +
	"\x97\xd8\x8d\x9e\x19t/\x8e\xf5o9\x7f$\xaf\xac\xf4" +
	"\x07\xc5\xb2q\xddM\xf7\x10\x1dR\xc7Q\x02L\xee\xe6" +
	"\xb8\x85R9DUR_\xd8\x8d\xfe\x92\xb5}\xa4C" +
	"W.\xb2CN8\xf1,N\xc8\x84H`T\xa3\x18" +
	"\x88\x09\xa8\xd5u@_\x8d\xa8;BE6\x186o" +
	"\x9e\x07\xf4\xf5\x88\xfa\x96\x90\xd2\xa0\x00J/\x03\xfaF" +
	"D}[\xe8\x8d\xb5\xfd\xa1+\xd7\xc0\xfb\xacAX\x03" +
	"\xe7\x9c\xe9\x15\xacBX\x05\x9f\xe6f\xcb8[\xb0\x02" +
	"a\x05\xd3\x86\xe9?\xfe\xc4\xfc\xf8\x95CW6\xd7\x8b" +
	"\x9da\xbaU\xee\xe8xR\xbb\x16\x1a\x1e\x8f\xa8\x1b\xc2" +
	"9c\xede\xd6\xa7\xd3\x05Y\xff_f\xc7\x0cL\xd4" +
	"\x9b\x85l\xfd\x8d\xfc\x15\x00\x00\xff\xff\x10*\xbf}"

func init() {
	schemas.Register(schema_aaa3acc39d94e0f8,
		0xa98297869266ae45,
		0xaa5f74d276d241e0,
		0xbae40ac2ebeb62eb,
		0xf679d46bf8232843)
}
