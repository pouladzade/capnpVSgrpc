// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuff/grpcbenchmark.proto

package protobuff

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AccountId struct {
	AccountId            []byte   `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountId) Reset()         { *m = AccountId{} }
func (m *AccountId) String() string { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()    {}
func (*AccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_eadefbc03f358a67, []int{0}
}
func (m *AccountId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountId.Unmarshal(m, b)
}
func (m *AccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountId.Marshal(b, m, deterministic)
}
func (m *AccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountId.Merge(m, src)
}
func (m *AccountId) XXX_Size() int {
	return xxx_messageInfo_AccountId.Size(m)
}
func (m *AccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountId.DiscardUnknown(m)
}

var xxx_messageInfo_AccountId proto.InternalMessageInfo

func (m *AccountId) GetAccountId() []byte {
	if m != nil {
		return m.AccountId
	}
	return nil
}

type Account struct {
	AccountId            *AccountId `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Balance              uint64     `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_eadefbc03f358a67, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccountId() *AccountId {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountId)(nil), "protobuff.AccountId")
	proto.RegisterType((*Account)(nil), "protobuff.Account")
}

func init() { proto.RegisterFile("protobuff/grpcbenchmark.proto", fileDescriptor_eadefbc03f358a67) }

var fileDescriptor_eadefbc03f358a67 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8e, 0xcd, 0x4e, 0x86, 0x30,
	0x10, 0x45, 0x53, 0x25, 0x92, 0x0e, 0xae, 0x26, 0x2e, 0x1a, 0xa2, 0x09, 0x61, 0x85, 0x0b, 0x4b,
	0x82, 0xf1, 0x01, 0xfc, 0x5b, 0xb8, 0xe5, 0x0d, 0xda, 0x5a, 0x0a, 0x41, 0x3a, 0xa4, 0x81, 0xf7,
	0x37, 0xa9, 0x16, 0x8d, 0x7e, 0xbb, 0x39, 0x67, 0xe6, 0xf6, 0x16, 0x6e, 0xd6, 0x40, 0x1b, 0xe9,
	0x7d, 0x18, 0x5a, 0x17, 0x56, 0xa3, 0xad, 0x37, 0xe3, 0xa2, 0xc2, 0x2c, 0xa3, 0x47, 0x7e, 0xac,
	0xcb, 0x3b, 0x37, 0x6d, 0xe3, 0xae, 0xa5, 0xa1, 0xa5, 0x75, 0xe4, 0xa8, 0x4d, 0xab, 0x48, 0x11,
	0xe2, 0xf4, 0x95, 0xac, 0x6f, 0x81, 0x3f, 0x1a, 0x43, 0xbb, 0xdf, 0xde, 0xde, 0xf1, 0x1a, 0xb8,
	0x4a, 0x20, 0x58, 0xc5, 0x9a, 0xcb, 0xfe, 0x47, 0xd4, 0x33, 0xe4, 0xdf, 0xa7, 0xd8, 0xfd, 0x3d,
	0x2c, 0xba, 0x2b, 0x79, 0xfc, 0x41, 0x1e, 0x2f, 0xfe, 0x8a, 0x23, 0x42, 0xe6, 0xd5, 0x62, 0xc5,
	0x59, 0xc5, 0x1a, 0xde, 0xc7, 0x19, 0x05, 0xe4, 0x5a, 0x7d, 0x28, 0x6f, 0xac, 0x38, 0xaf, 0x58,
	0x93, 0xf5, 0x09, 0xbb, 0x17, 0x28, 0x9e, 0x29, 0xd8, 0x27, 0xe5, 0xe7, 0xc9, 0x3b, 0x7c, 0x80,
	0xe2, 0xd5, 0x8c, 0x94, 0xfa, 0xf1, 0x7f, 0x59, 0x79, 0xc2, 0xe9, 0x8b, 0xa8, 0xee, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x6e, 0xc8, 0x85, 0x83, 0x3f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreBankingClient is the client API for CoreBanking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreBankingClient interface {
	EchoAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
}

type coreBankingClient struct {
	cc *grpc.ClientConn
}

func NewCoreBankingClient(cc *grpc.ClientConn) CoreBankingClient {
	return &coreBankingClient{cc}
}

func (c *coreBankingClient) EchoAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/protobuff.CoreBanking/EchoAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreBankingServer is the server API for CoreBanking service.
type CoreBankingServer interface {
	EchoAccount(context.Context, *Account) (*Account, error)
}

func RegisterCoreBankingServer(s *grpc.Server, srv CoreBankingServer) {
	s.RegisterService(&_CoreBanking_serviceDesc, srv)
}

func _CoreBanking_EchoAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreBankingServer).EchoAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuff.CoreBanking/EchoAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreBankingServer).EchoAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreBanking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.CoreBanking",
	HandlerType: (*CoreBankingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoAccount",
			Handler:    _CoreBanking_EchoAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuff/grpcbenchmark.proto",
}
