// Code generated by capnpc-go. DO NOT EDIT.

package capnpbenchmark

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Account struct{ capnp.Struct }

// Account_TypeID is the unique identifier for the type Account.
const Account_TypeID = 0xaa5f74d276d241e0

func NewAccount(s *capnp.Segment) (Account, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Account{st}, err
}

func NewRootAccount(s *capnp.Segment) (Account, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Account{st}, err
}

func ReadRootAccount(msg *capnp.Message) (Account, error) {
	root, err := msg.RootPtr()
	return Account{root.Struct()}, err
}

func (s Account) String() string {
	str, _ := text.Marshal(0xaa5f74d276d241e0, s.Struct)
	return str
}

func (s Account) AccountId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Account) HasAccountId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Account) SetAccountId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Account) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Account) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Account) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Account) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Account) Balance() uint64 {
	return s.Struct.Uint64(0)
}

func (s Account) SetBalance(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Account_List is a list of Account.
type Account_List struct{ capnp.List }

// NewAccount creates a new list of Account.
func NewAccount_List(s *capnp.Segment, sz int32) (Account_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Account_List{l}, err
}

func (s Account_List) At(i int) Account { return Account{s.List.Struct(i)} }

func (s Account_List) Set(i int, v Account) error { return s.List.SetStruct(i, v.Struct) }

func (s Account_List) String() string {
	str, _ := text.MarshalList(0xaa5f74d276d241e0, s.List)
	return str
}

// Account_Promise is a wrapper for a Account promised by a client call.
type Account_Promise struct{ *capnp.Pipeline }

func (p Account_Promise) Struct() (Account, error) {
	s, err := p.Pipeline.Struct()
	return Account{s}, err
}

type CoreBanking struct{ Client capnp.Client }

// CoreBanking_TypeID is the unique identifier for the type CoreBanking.
const CoreBanking_TypeID = 0xa98297869266ae45

func (c CoreBanking) EchoAccount(ctx context.Context, params func(CoreBanking_echoAccount_Params) error, opts ...capnp.CallOption) CoreBanking_echoAccount_Results_Promise {
	if c.Client == nil {
		return CoreBanking_echoAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa98297869266ae45,
			MethodID:      0,
			InterfaceName: "capnpproto/capnpbenchmark.capnp:CoreBanking",
			MethodName:    "echoAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(CoreBanking_echoAccount_Params{Struct: s}) }
	}
	return CoreBanking_echoAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type CoreBanking_Server interface {
	EchoAccount(CoreBanking_echoAccount) error
}

func CoreBanking_ServerToClient(s CoreBanking_Server) CoreBanking {
	c, _ := s.(server.Closer)
	return CoreBanking{Client: server.New(CoreBanking_Methods(nil, s), c)}
}

func CoreBanking_Methods(methods []server.Method, s CoreBanking_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa98297869266ae45,
			MethodID:      0,
			InterfaceName: "capnpproto/capnpbenchmark.capnp:CoreBanking",
			MethodName:    "echoAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := CoreBanking_echoAccount{c, opts, CoreBanking_echoAccount_Params{Struct: p}, CoreBanking_echoAccount_Results{Struct: r}}
			return s.EchoAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// CoreBanking_echoAccount holds the arguments for a server call to CoreBanking.echoAccount.
type CoreBanking_echoAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  CoreBanking_echoAccount_Params
	Results CoreBanking_echoAccount_Results
}

type CoreBanking_echoAccount_Params struct{ capnp.Struct }

// CoreBanking_echoAccount_Params_TypeID is the unique identifier for the type CoreBanking_echoAccount_Params.
const CoreBanking_echoAccount_Params_TypeID = 0xf679d46bf8232843

func NewCoreBanking_echoAccount_Params(s *capnp.Segment) (CoreBanking_echoAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Params{st}, err
}

func NewRootCoreBanking_echoAccount_Params(s *capnp.Segment) (CoreBanking_echoAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Params{st}, err
}

func ReadRootCoreBanking_echoAccount_Params(msg *capnp.Message) (CoreBanking_echoAccount_Params, error) {
	root, err := msg.RootPtr()
	return CoreBanking_echoAccount_Params{root.Struct()}, err
}

func (s CoreBanking_echoAccount_Params) String() string {
	str, _ := text.Marshal(0xf679d46bf8232843, s.Struct)
	return str
}

func (s CoreBanking_echoAccount_Params) Acc1() (Account, error) {
	p, err := s.Struct.Ptr(0)
	return Account{Struct: p.Struct()}, err
}

func (s CoreBanking_echoAccount_Params) HasAcc1() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CoreBanking_echoAccount_Params) SetAcc1(v Account) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAcc1 sets the acc1 field to a newly
// allocated Account struct, preferring placement in s's segment.
func (s CoreBanking_echoAccount_Params) NewAcc1() (Account, error) {
	ss, err := NewAccount(s.Struct.Segment())
	if err != nil {
		return Account{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CoreBanking_echoAccount_Params_List is a list of CoreBanking_echoAccount_Params.
type CoreBanking_echoAccount_Params_List struct{ capnp.List }

// NewCoreBanking_echoAccount_Params creates a new list of CoreBanking_echoAccount_Params.
func NewCoreBanking_echoAccount_Params_List(s *capnp.Segment, sz int32) (CoreBanking_echoAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CoreBanking_echoAccount_Params_List{l}, err
}

func (s CoreBanking_echoAccount_Params_List) At(i int) CoreBanking_echoAccount_Params {
	return CoreBanking_echoAccount_Params{s.List.Struct(i)}
}

func (s CoreBanking_echoAccount_Params_List) Set(i int, v CoreBanking_echoAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CoreBanking_echoAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xf679d46bf8232843, s.List)
	return str
}

// CoreBanking_echoAccount_Params_Promise is a wrapper for a CoreBanking_echoAccount_Params promised by a client call.
type CoreBanking_echoAccount_Params_Promise struct{ *capnp.Pipeline }

func (p CoreBanking_echoAccount_Params_Promise) Struct() (CoreBanking_echoAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return CoreBanking_echoAccount_Params{s}, err
}

func (p CoreBanking_echoAccount_Params_Promise) Acc1() Account_Promise {
	return Account_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type CoreBanking_echoAccount_Results struct{ capnp.Struct }

// CoreBanking_echoAccount_Results_TypeID is the unique identifier for the type CoreBanking_echoAccount_Results.
const CoreBanking_echoAccount_Results_TypeID = 0xbae40ac2ebeb62eb

func NewCoreBanking_echoAccount_Results(s *capnp.Segment) (CoreBanking_echoAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Results{st}, err
}

func NewRootCoreBanking_echoAccount_Results(s *capnp.Segment) (CoreBanking_echoAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CoreBanking_echoAccount_Results{st}, err
}

func ReadRootCoreBanking_echoAccount_Results(msg *capnp.Message) (CoreBanking_echoAccount_Results, error) {
	root, err := msg.RootPtr()
	return CoreBanking_echoAccount_Results{root.Struct()}, err
}

func (s CoreBanking_echoAccount_Results) String() string {
	str, _ := text.Marshal(0xbae40ac2ebeb62eb, s.Struct)
	return str
}

func (s CoreBanking_echoAccount_Results) Acc2() (Account, error) {
	p, err := s.Struct.Ptr(0)
	return Account{Struct: p.Struct()}, err
}

func (s CoreBanking_echoAccount_Results) HasAcc2() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CoreBanking_echoAccount_Results) SetAcc2(v Account) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAcc2 sets the acc2 field to a newly
// allocated Account struct, preferring placement in s's segment.
func (s CoreBanking_echoAccount_Results) NewAcc2() (Account, error) {
	ss, err := NewAccount(s.Struct.Segment())
	if err != nil {
		return Account{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CoreBanking_echoAccount_Results_List is a list of CoreBanking_echoAccount_Results.
type CoreBanking_echoAccount_Results_List struct{ capnp.List }

// NewCoreBanking_echoAccount_Results creates a new list of CoreBanking_echoAccount_Results.
func NewCoreBanking_echoAccount_Results_List(s *capnp.Segment, sz int32) (CoreBanking_echoAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CoreBanking_echoAccount_Results_List{l}, err
}

func (s CoreBanking_echoAccount_Results_List) At(i int) CoreBanking_echoAccount_Results {
	return CoreBanking_echoAccount_Results{s.List.Struct(i)}
}

func (s CoreBanking_echoAccount_Results_List) Set(i int, v CoreBanking_echoAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CoreBanking_echoAccount_Results_List) String() string {
	str, _ := text.MarshalList(0xbae40ac2ebeb62eb, s.List)
	return str
}

// CoreBanking_echoAccount_Results_Promise is a wrapper for a CoreBanking_echoAccount_Results promised by a client call.
type CoreBanking_echoAccount_Results_Promise struct{ *capnp.Pipeline }

func (p CoreBanking_echoAccount_Results_Promise) Struct() (CoreBanking_echoAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return CoreBanking_echoAccount_Results{s}, err
}

func (p CoreBanking_echoAccount_Results_Promise) Acc2() Account_Promise {
	return Account_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_aaa3acc39d94e0f8 = "x\xda\x94\x91\xb1k\x14A\x18\xc5\xdf\xfbv7\xeb\xc9" +
	"\x1d\xb9e\xcf\xfe@\x0b\x15\x8d\xc4\xebl.\xb9\x18\xf4" +
	"@\xe1&Xh\x11dv\\\x93p\xb9\xd9\xe3nW" +
	"H!\x82\xa0\x7f\x80\x08VVV\x06\xd1\xdeR\x0b\xfb" +
	"\xa0}\x0a\xbb\xeb%\xd8\x8c\xecIr\x01\xc1\x90\xee\xcd" +
	"\xcc\x9b\xf7{3_\xfd\xc7\x92,\x06\xdf\x04P\xcd`" +
	"\xce\xad~|\xfc\xea\xe5\x9b\xe7\xef\x115=w\xb0\xff" +
	"\xfa\xed\xd7\x0f\xefv\x01\xb6\xbaL\x18\xaf3\x04\xe2\x07" +
	"\xbc\x15\xbf(\x95\xdb_\xde{\xb2\x97?\xdc\x85j\x92" +
	"3{ !\xd0\x1a\xb0\xc3\xf8\xe9\xf4\xc6\x0e?\x81n" +
	"\x92L&_\xce\xfe\xfc\x8c\xe8\x0a\x81\xa0<i\x9d\x13" +
	"\x110\xbe$m\xd0\xad\\<\x7f\xd0\xff\xbe\xf3\xeb\xb8" +
	"\xa1+\xbf\x09\xc6\xeb\xd2\xc6Ug\xf4\xd0\x0e\x87\xa3\xcc" +
	"\xcf\xb3kS\x9d\xa4\xd6l\x0e\xf4\xa8\xbf0]\xdeX" +
	"\xc9FiG\xdb~\xb8e7z\xa4\xf2\xbd\x008\xca" +
	"\xe5a\x83(J Q%t\xa9\xd9\xcc\x96\x8d\xc9\x10" +
	"\x166_b\x8f<\x99Q\xfa\x0b\x9b\xa3\xcc\xafz>" +
	"\xe0\x13\x88V\xd7\x00u\xd3\xa3\xea\x09#\xb2\xc1r\xf3" +
	"\xeee@\xdd\xf6\xa8\xee\x09)\x0d\x0a\x10\xa9\x0e\xa0\xee" +
	"xT\xf7\x85N\xff\xcd\xea\x82\x8fX\x83\xb0\x06\xce[" +
	"=HY\x85\xb0\x0a>K\xf4\xb6\xb6&e\x05\xc2\x0a" +
	"f\xed\xc2\x93~`\xcbn,\x1c\xbe\xae\xb0\xf9\x85\xb5" +
	"t\\l\xe7c(\xff\xa8r\xadlw\xc6\xa3j\x08" +
	"\xe7\xb51\xd7Y\x9fM\x14d\xfd\x18o\xee\xb4\xbcv" +
	"O\x8f\xf4`\xfc\x1f\xdc\xe2\xbf\xb8?\x01\x00\x00\xff\xff" +
	"\x18H\xba\x18"

func init() {
	schemas.Register(schema_aaa3acc39d94e0f8,
		0xa98297869266ae45,
		0xaa5f74d276d241e0,
		0xbae40ac2ebeb62eb,
		0xf679d46bf8232843)
}
